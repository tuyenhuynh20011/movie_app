{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\Assignment 01 Frontend\\\\FrontEnd\\\\src\\\\components\\\\browse\\\\MovieList.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../utils/axios';\nimport movieTrailer from 'movie-trailer';\nimport MovieDetail from '../../components/browse/MovieDetail';\nimport './MovieList.css';\nconst base_url = 'https://image.tmdb.org/t/p/original';\nconst movies_limit = 10;\nvar myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"\");\nmyHeaders.append(\"Authorization\", \"Bearer RYoOcWM4JW\");\nvar graphql = JSON.stringify({\n  query: \"\",\n  variables: {}\n});\nconst requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  body: graphql,\n  redirect: 'follow'\n};\nasy;\nconst request = await fetch(\"http://localhost:3001/api/movies/trending\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n\nfunction MovieList({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = movie => {\n    if (selectedMovie && selectedMovie.id === movie.id) {\n      setSelectedMovie(null);\n      setTrailerUrl('');\n    } else {\n      setSelectedMovie(movie);\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || '').then(url => {\n        console.log(url);\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"movie-list-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters sc2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }\n  }, movies.map(movie => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: movie.id,\n      onClick: () => handleClick(movie),\n      className: `row_poster ${isLargeRow && 'row_posterLarge'}`,\n      src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n      alt: movie.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '40px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }\n  }, selectedMovie && /*#__PURE__*/React.createElement(MovieDetail, {\n    movieData: selectedMovie,\n    movieTrailer: trailerUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 23\n    }\n  })));\n}\n\nexport default MovieList;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Assignment 01 Frontend/FrontEnd/src/components/browse/MovieList.jsx"],"names":["React","useState","useEffect","axios","movieTrailer","MovieDetail","base_url","movies_limit","myHeaders","Headers","append","graphql","JSON","stringify","query","variables","requestOptions","method","headers","body","redirect","asy","request","fetch","then","response","text","result","console","log","catch","error","MovieList","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","selectedMovie","setSelectedMovie","fetchData","get","data","results","handleClick","movie","id","url","urlParams","URLSearchParams","URL","search","map","poster_path","backdrop_path","name","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from '../../utils/axios';\nimport movieTrailer from 'movie-trailer';\nimport MovieDetail from '../../components/browse/MovieDetail';\nimport './MovieList.css';\n\nconst base_url = 'https://image.tmdb.org/t/p/original';\n\n\nconst movies_limit = 10;\n\nvar myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"\");\nmyHeaders.append(\"Authorization\", \"Bearer RYoOcWM4JW\");\n\nvar graphql = JSON.stringify({\n  query: \"\",\n  variables: {}\n})\nconst requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  body: graphql,\n  redirect: 'follow'\n};\n\nasy\nconst request = await  fetch(\"http://localhost:3001/api/movies/trending\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n\n\nfunction MovieList({ title, fetchUrl, isLargeRow }) {\n\n\tconst [movies, setMovies] = useState([]);\n\tconst [trailerUrl, setTrailerUrl] = useState('');\n\tconst [selectedMovie, setSelectedMovie] = useState(null);\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tconst request = await axios.get(fetchUrl);\n\t\t\tsetMovies(request.data.results);\n\t\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t}, [fetchUrl]);\n\n\n\n\tconst handleClick = (movie) => {\n\t\tif (selectedMovie && selectedMovie.id === movie.id) {\n\t\t\tsetSelectedMovie(null);\n\t\t\tsetTrailerUrl('');\n\t\t} else {\n\t\t\tsetSelectedMovie(movie);\n\t\t\tmovieTrailer(movie?.title || '')\n\t\t\t.then((url) => {\n\t\t\t\tconsole.log(url)\n\t\t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\n\t\t\t\tsetTrailerUrl(urlParams.get('v'));\n\t\t\t})\n\t\t\t.catch((error) => console.log(error));\n\t\t}\n\t\n\t};\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t<h2 className=\"movie-list-title\">{title}</h2>\n\t\t\t<div className='row_posters sc2'>\n\t\t\t\t{movies.map((movie) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tkey={movie.id}\t\n\t\t\t\t\t\t\tonClick={() => handleClick(movie)}\n\t\t\t\t\t\t\tclassName={`row_poster ${isLargeRow && 'row_posterLarge'}`}\n\t\t\t\t\t\t\tsrc={`${base_url}${\n\t\t\t\t\t\t\t\tisLargeRow ? movie.poster_path : movie.backdrop_path\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\talt={movie.name}\t\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<div style={{ padding: '40px' }}>\n\t\t\t\t{selectedMovie && <MovieDetail movieData={selectedMovie} movieTrailer={trailerUrl} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default MovieList;\n"]},"metadata":{},"sourceType":"module"}