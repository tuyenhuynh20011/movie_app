{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\Assignment 01 Frontend\\\\FrontEnd\\\\src\\\\components\\\\search\\\\SearchResult.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../utils/axios';\nimport requests from '../../utils/requests';\nimport './SearchResult.css';\nconst base_url = 'https://image.tmdb.org/t/p/original';\n\nconst SearchResult = ({\n  query\n}) => {\n  const [movies, setMovies] = useState([]); // const url = `${requests.fetchSearch}/${String(query.keywords)}?genre=${parseInt(query.genre)}&mediaType=${query.mediaType}&language=${query.language}&year=${query.year}`;\n  // const url = `${requests.fetchSearch}/${String(query.keywords)}`;\n  // if(query.genre!='Genre' && query.genre!=''){\n  // }\n\n  const checkurl = query => {\n    const url = `${requests.fetchSearch}/${String(query.keywords)}`;\n\n    if (query.genre != 'Genre' && query.genre != '') {\n      url = `${requests.fetchSearch}/${String(query.keywords)}`;\n    }\n  };\n\n  checkurl(query);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(url);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    if (query) {\n      fetchData();\n    } else {\n      setMovies([]);\n    }\n  }, [url, query]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }\n  }, \"Search Result\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters search-resul-container sc2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }\n  }, movies.map(movie => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: movie.id,\n      className: `row_poster row_posterLarge`,\n      src: `${base_url}${movie.poster_path}`,\n      alt: movie.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 8\n      }\n    });\n  })));\n};\n\nexport default SearchResult;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Assignment 01 Frontend/FrontEnd/src/components/search/SearchResult.jsx"],"names":["React","useState","useEffect","axios","requests","base_url","SearchResult","query","movies","setMovies","checkurl","url","fetchSearch","String","keywords","genre","fetchData","request","get","data","results","map","movie","id","poster_path","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,OAAO,oBAAP;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC,CADiC,CAEjC;AACA;AACA;AAEA;;AACA,QAAMS,QAAQ,GAAIH,KAAD,IAAW;AAC3B,UAAMI,GAAG,GAAI,GAAEP,QAAQ,CAACQ,WAAY,IAAGC,MAAM,CAACN,KAAK,CAACO,QAAP,CAAiB,EAA9D;;AACA,QAAGP,KAAK,CAACQ,KAAN,IAAa,OAAb,IAAwBR,KAAK,CAACQ,KAAN,IAAa,EAAxC,EACA;AACCJ,MAAAA,GAAG,GAAE,GAAEP,QAAQ,CAACQ,WAAY,IAAGC,MAAM,CAACN,KAAK,CAACO,QAAP,CAAiB,EAAtD;AACA;AAED,GAPD;;AAQAJ,EAAAA,QAAQ,CAACH,KAAD,CAAR;AAGAL,EAAAA,SAAS,CAAC,MAAM;AACf,mBAAec,SAAf,GAA2B;AAC1B,YAAMC,OAAO,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUP,GAAV,CAAtB;AACAF,MAAAA,SAAS,CAACQ,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACA;;AAED,QAAIV,KAAJ,EAAW;AACVS,MAAAA,SAAS;AACT,KAFD,MAEO;AACNP,MAAAA,SAAS,CAAC,EAAD,CAAT;AACA;AACD,GAZQ,EAYN,CAACE,GAAD,EAAMJ,KAAN,CAZM,CAAT;AAcA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,eAEC;AAAK,IAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,MAAM,CAACa,GAAP,CAAYC,KAAD,IAAW;AACtB,wBACC;AACC,MAAA,GAAG,EAAEA,KAAK,CAACC,EADZ;AAEC,MAAA,SAAS,EAAG,4BAFb;AAGC,MAAA,GAAG,EAAG,GAAElB,QAAS,GAAEiB,KAAK,CAACE,WAAY,EAHtC;AAIC,MAAA,GAAG,EAAEF,KAAK,CAACG,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAQA,GATA,CADH,CAFD,CADD;AAiBA,CAjDD;;AAmDA,eAAenB,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport axios from '../../utils/axios';\nimport requests from '../../utils/requests';\n\nimport './SearchResult.css';\n\nconst base_url = 'https://image.tmdb.org/t/p/original';\n\nconst SearchResult = ({query}) => {\n\tconst [movies, setMovies] = useState([]);\n\t// const url = `${requests.fetchSearch}/${String(query.keywords)}?genre=${parseInt(query.genre)}&mediaType=${query.mediaType}&language=${query.language}&year=${query.year}`;\n\t// const url = `${requests.fetchSearch}/${String(query.keywords)}`;\n\t// if(query.genre!='Genre' && query.genre!=''){\n\t\t\n\t// }\n\tconst checkurl = (query) => {\n\t\tconst url = `${requests.fetchSearch}/${String(query.keywords)}`;\n\t\tif(query.genre!='Genre' && query.genre!='')\n\t\t{\n\t\t\turl=`${requests.fetchSearch}/${String(query.keywords)}`\n\t\t}\n\n\t}\n\tcheckurl(query)\n\n\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tconst request = await axios.get(url);\n\t\t\tsetMovies(request.data.results);\n\t\t\treturn request;\n\t\t}\n\n\t\tif (query) {\n\t\t\tfetchData();\n\t\t} else {\n\t\t\tsetMovies([]);\n\t\t}\n\t}, [url, query]);\n\t\n\treturn(\n\t\t<div className='row'>\n\t\t\t<h2>Search Result</h2>\n\t\t\t<div className='row_posters search-resul-container sc2'>\n\t\t\t\t\t{movies.map((movie) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tkey={movie.id}\n\t\t\t\t\t\t\t\tclassName={`row_poster row_posterLarge`}\n\t\t\t\t\t\t\t\tsrc={`${base_url}${movie.poster_path}`}\n\t\t\t\t\t\t\t\talt={movie.name}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t)\n};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}